
#include <iostream>
#include <cmath>
#include <vector>
#include <set>

using namespace std;

bool isSquareFree(unsigned long long n)
{
    if(n%2 == 0) n /= 2;
    if(n%2 == 0) return false;
    
    for(unsigned long long i=3; i<=(unsigned long long)sqrt(n)+1;i+=2)
    {
        if(n%i == 0) n /= i;
        if(n%i == 0) return false;         
    }
    return true;
}

void add_row(vector <unsigned long long> *coeff[], unsigned row)
{
	coeff[row]->push_back(1);
	for(auto i = 0; i<coeff[row-1]->size()-1;++i)
		coeff[row]->push_back(coeff[row-1]->at(i)+coeff[row-1]->at(i+1));
	coeff[row]->push_back(1);

}


int main()
{
	
	vector <unsigned long long> *coeff_Ptr[52];

	vector <unsigned long long> a{1};
	vector <unsigned long long> b{1,1};
	
	coeff_Ptr[0] = &a;
	coeff_Ptr[1] = &b;

	unsigned n = 51;
	for(auto i = 2;i<n;++i)
	{
		coeff_Ptr[i] = new vector <unsigned long long>;
		add_row(coeff_Ptr,i);		
	}
	
	/*
	for(auto i=0;i<coeff_Ptr[50]->size();++i)
		cout << coeff_Ptr[50]->at(i) << endl;
*/
		
	set <unsigned long long> values{1};
	for(auto i=2;i<n;++i)
		for(auto j=1;j<coeff_Ptr[i]->size()-1;++j)
			values.insert(coeff_Ptr[i]->at(j));
//	cout << "Set Size: " << values.size() << endl;
    set<unsigned long long> :: iterator it;
    unsigned long long sum = 0;
    for (auto it = values.begin(); it!=values.end();++it)
    {
    	    if(isSquareFree(*it)==true) 
			{
				cout << *it << endl;
				sum+=*it;	
			}
    }		
	
	cout << "Sol: " << sum << endl;

	delete[] coeff_Ptr;
    return 0;
}
